// MARK: - Generic
"Generic.OK" = "OK";
"Generic.Close" = "Close";
"Generic.Next" = "Next";
"Generic.Skip" = "Skip";
"Generic.Back" = "Back";
"Generic.Zils" = "ZILs";

"Generic.Show" = "Show";
"Generic.Hide" = "Hide";

//"Error.Input.Address.ContainsNonHexadecimal" = "Only 0-9 and A-F allowed";

"Error.Input.Address.Invalid" = "Invalid address";
"Error.Input.Address.TooShort" = "Address is too short, should be %d";
"Error.Input.Address.TooLong" = "Address is too long, should be %d";
"Error.Input.Address.AddressNotChecksummed" = "Invalid checksum.";

"Error.Input.Amount.NonNumericString" = "String not a number";
"Error.Input.Amount.TooSmall" = "Must be at least %@";
"Error.Input.Amount.TooLarge" = "Must be at most %@";
"Error.Input.Amount.ExceedingBalance" = "Insufficient funds";

"Error.Input.Password.TooShort" = "Password have length >%d";
"Error.Input.Password.ConfirmingPasswordMismatch" = "Passwords does not match";
"Error.Input.Password.IncorrectPassword" = "Incorrect password";
"Error.Input.Password.IncorrectPasswordDuringBackupOfNewlyCreatedWallet" = "Incorrect password, if you can't remember it do NOT continue, restart the wallet creation from the beginning.";

"Error.Input.Pincode.PincodesDoesNotMatch" = "PIN does not match";
"Error.Input.Pincode.IncorrectPincode" = "Incorrect PIN";

"Error.Input.PrivateKey.TooShort" = "Should be %d characters (missing %d)";
"Error.Input.PrivateKey.TooLong" = "Should be %d characters (%d too many)";
"Error.Input.PrivateKey.BadKey" = "Bad private key";

"Error.Input.Keystore.BadFormatOrInput" = "Bad JSON, control format.";
"Error.Input.Keystore.IncorrectPassword" = "Keystore was not encrypted by this password";

// MARK: - Common for Views
"View.PullToRefreshControl.Title" = "Pull to refresh";

"Formatter.BalanceWasUpdatedAt" = "Balance last updated %@.";
"Formatter.BalanceFirstFetch" = "Fetching balance...";

// MARK: - Onboarding

// MARK: Welcome
"Scene.Welcome.Label.Header" = "Welcome";
"Scene.Welcome.Label.Body" = "Welcome to Zhip - the worlds first and only iOS wallet for Zilliqa.";
"Scene.Welcome.Button.Start" = "Start";

// MARK: TermsOfService
"Scene.TermsOfService.Label.TermsOfService" = "Terms of service";
"Scene.TermsOfService.Button.Accept" = "Accept";

// MARK: AskForCrashReportingPermissions
"Scene.AskForCrashReportingPermissions.Title" = "Crash reporting";
"Scene.AskForCrashReportingPermissions.Text.Disclaimer" = "We would love to improve this app by collecting and analyzing anonymized crash reports sent by the app if it crashes. \n\nYou can opt out of this at anytime from the settings menu.\n\nThe app does not use any analytics beside crash reporting (Crashlytics), which you can verify yourself since this app is open source, search for `Analytics.logEvent` or `Analytics.setScreenName` in the code base which will not yield any search results.\n\nPlease 'Opt In' or 'Opt Out' of crash reporting.";
"Scene.AskForCrashReportingPermissions.Checkbox.ReadDisclaimer" = "I have read and understood the crash reporting disclaimer";
"Scene.AskForCrashReportingPermissions.Button.Accept" = "Opt in";
"Scene.AskForCrashReportingPermissions.Button.Decline" = "Opt out";

// MARK: WarningERC20
"Scene.WarningERC20.Label.Erc20Tokens" = "ERC-20 tokens";
"Scene.WarningERC20.Text.WarningERC20" = "This is a wallet for the Zilliqa network. Do NOT send ERC-20 ZILs to native Zilliqa addresses.\n\nTransferring ERC-20 ZILs to a native Zilliqa address - or vice versa - will cause irreparable loss.";
"Scene.WarningERC20.Checkbox.UnderstandsERC20Incompatibility" = "I understand that ERC-20 ZILs are not supported";
"Scene.WarningERC20.Button.Accept" = "Accept";
"Scene.WarningERC20.Button.DoNotShowAgain" = "Do not show this again";

// MARK: WarningCustomECC
"Scene.WarningCustomECC.Label.Header" = "Unreliable ECC";
"Scene.WarningCustomECC.Button.Accept" = "Accept";

// MARK: ChooseWallet
"Scene.ChooseWallet.Label.Impression" = "Wallet";
"Scene.ChooseWallet.Label.SetUpWallet" = "It is time to set up the wallet. Do you want to start fresh, or restore an existing wallet?";
"Scene.ChooseWallet.Button.NewWallet" = "New Wallet";
"Scene.ChooseWallet.Button.RestoreWallet" = "Restore existing wallet";

// MARK: EnsureThatYouAreNotBeingWatched
"Scene.EnsureThatYouAreNotBeingWatched.Label.Security" = "Security";
"Scene.EnsureThatYouAreNotBeingWatched.Label.MakeSureAlone" = "Make sure that you are in a private space where no one can see/record your personal data. Avoid public places, cameras and CCTVâ€™s.";
"Scene.EnsureThatYouAreNotBeingWatched.Button.Understand" = "I understand";

// MARK: CreateNewWallet
"Scene.CreateNewWallet.Title" = "New wallet";
"Scene.CreateNewWallet.Labels.ChooseNewPassword.Title" = "Set an encryption password";
"Scene.CreateNewWallet.Labels.ChooseNewPassword.Value" = "Your encryption password is used to encrypt your private key. Make sure to back up your encryption password before proceeding.";
"Scene.CreateNewWallet.Field.EncryptionPassword" = "Encryption password (min %d chars)";
"Scene.CreateNewWallet.Field.ConfirmEncryptionPassword" = "Confirm encryption password";
"Scene.CreateNewWallet.Checkbox.PasswordIsBackedUp" = "I have securely backed up my encryption password";
"Scene.CreateNewWallet.Button.Continue" = "Continue";

// MARK: BackupWallet
"Scene.BackupWallet.Title" = "Back up wallet";
"Scene.BackupWallet.Label.BackUpKeys" = "Back up keys";
"Scene.BackupWallet.Label.UrgeBackup" = "Backing up the private key is the most important, but is also the most sensitive data. The private key is not tied to the encryption password, but the keystore is. Failing to backup your wallet may result in irreversible loss of assets.";
"Scene.BackupWallet.Label.Keystore" = "Keystore";
"Scene.BackupWallet.Button.Copy" = "Copy";
"Scene.BackupWallet.Label.PrivateKey" = "Private Key";
"Scene.BackupWallet.Buttons.Reveal" = "Reveal";
"Scene.BackupWallet.Checkbox.HaveSecurelyBackedUp" = "I have securely backed up my private key.";
"Scene.BackupWallet.Button.Done" = "Done";
"Scene.BackupWallet.Event.Toast.DidCopyKeystore" = "Copied keystore";

// MARK: Backup KeyPair
"Scene.DecryptKeystoreToRevealKeyPair.Title" = "Private key";
"Scene.DecryptKeystoreToRevealKeyPair.Label.DecryptToReaveal" = "Enter your encryption password to reveal your private and public key.";
"Scene.DecryptKeystoreToRevealKeyPair.Field.EncryptionPassword" = "Encryption password";
"Scene.DecryptKeystoreToRevealKeyPair.Button.Reveal" = "Reveal";

"Scene.BackUpRevealedKeyPair.Title" = "Backup key pair";
"Scene.BackUpRevealedKeyPair.Label.PrivateKey" = "Private key";
"Scene.BackUpRevealedKeyPair.Label.UncompressedPublicKey" = "Uncompressed public key";
"Scene.BackUpRevealedKeyPair.Buttons.Copy" = "Copy";
"Scene.BackUpRevealedKeyPair.Event.Toast.DidCopyPrivateKey" = "Copied private key";
"Scene.BackUpRevealedKeyPair.Event.Toast.DidCopyPublicKey" = "Copied public key";

// MARK: BackUp Keystore
"Scene.BackUpKeystore.Title" = "Keystore";
"Scene.BackUpKeystore.Button.Copy" = "Copy keystore";
"Scene.BackUpKeystore.Event.Toast.DidCopyKeystore" = "Copied keystore";

// MARK: RestoreWallet
"Scene.RestoreWallet.Title" = "Restore existing wallet";
"Scene.RestoreWallet.Label.Header.Keystore" = "Restore with keystore";
"Scene.RestoreWallet.Label.Header.PrivateKey" = "Restore with private key";
"Scene.RestoreWallet.Segment.PrivateKey" = "Private key";
"Scene.RestoreWallet.Segment.Keystore" = "Keystore";
"Scene.RestoreWallet.Field.PrivateKey" = "Private key";
"Scene.RestoreWallet.Field.EncryptionPassword.PrivateKey" = "New encryption password (min %d chars)";
"Scene.RestoreWallet.Field.EncryptionPassword.Keystore" = "Encryption password (min %d chars)";
"Scene.RestoreWallet.Field.ConfirmEncryptionPassword" = "Confirm encryption password";
"Scene.RestoreWallet.Button.RestoreWallet" = "Restore";

// MARK: ChoosePincode
"Scene.ChoosePincode.Title" = "Set PIN";
"Scene.ChoosePincode.Button.Done" = "Done";
"Scene.ChoosePincode.Text.PincodeOnlyLocksApp" = "The app PIN is an extra safety measure used only to unlock the app. It is not used to encrypt your private key. Before setting a PIN back up the wallet, otherwise you might get locked out if you forget it.";


// MARK: ConfirmNewPincode
"Scene.ConfirmNewPincode.Title" = "Confirm PIN";
"Scene.ConfirmNewPincode.Error.PincodesDoesNotMatch" = "PIN does not match";
"Scene.ConfirmNewPincode.Checkbox.PincodeIsBackedUp" = "I have securely backed up my PIN code";
"Scene.ConfirmNewPincode.Button.Done" = "Done";


// MARK: - Main Flow

// MARK: Main
"Scene.Main.Label.Balance.Title" = "Your balance";
"Scene.Main.Button.Send" = "Send";
"Scene.Main.Button.Receive" = "Receive";

// MARK: Unlock App
"Scene.UnlockAppWithPincode.Title" = "Unlock app";
"Scene.UnlockAppWithPincode.Label" = "Unlock app with PIN or FaceId/TouchId";
"Scene.UnlockAppWithPincode.Biometrics.Reason" = "Unlock app easily with FaceId/TouchId";
"Scene.UnlockAppWithPincode.Biometrics.FallBack" = "Use PIN";

// MARK: Remove Pincode
"Scene.RemovePincode.Title" = "Unlock to remove";

// MARK: PrepareTransaction
"Scene.PrepareTransaction.Title" = "Send";
"Scene.PrepareTransaction.Field.Recipient" = "To address";
"Scene.PrepareTransaction.Field.Amount" = "Amount in %@";
"Scene.PrepareTransaction.Button.MaxAmount" = "Max";
"Scene.PrepareTransaction.Label.GasInSmallUnits" = "Gas price is measured in %@";
"Scene.PrepareTransaction.Field.GasPrice" = "Gas price (min %@)";
"Scene.PrepareTransaction.Field.EncryptionPassword" = "Encryption password";
"Scene.PrepareTransaction.Button.ReviewPayment" = "Review Payment";
//"Scene.PrepareTransaction.Label.TransactionId" = "Transaction Id";
"Scene.PrepareTransaction.Labels.Balance.Title" = "Current balance";
"Scene.PrepareTransaction.Label.CostOfTransactionInZil" = "Transaction fee: %@";

// MARK: ScanQRCode
"Scene.ScanQRCode.Title" = "Scan QR";
"Scene.ScanQRCode.Event.Toast.IncompatibleQrCode.Title" = "QR code contains no compatible Zilliqa address";
"Scene.ScanQRCode.Event.Toast.IncompatibleQrCode.Dismiss" = "Dismiss";

// MARK: ReviewTransaction
"Scene.ReviewTransactionBeforeSigning.Title" = "Summary";
"Scene.ReviewTransactionBeforeSigning.Label.Recipient" = "Recipient";
"Scene.ReviewTransactionBeforeSigning.Label.Address.Legacy" = "Address on old base16 format";
"Scene.ReviewTransactionBeforeSigning.Label.Address.Bech32" = "Address on new bech32 format";
"Scene.ReviewTransactionBeforeSigning.Label.Amount" = "Amount";
"Scene.ReviewTransactionBeforeSigning.Label.AmountToSend" = "Amount to recipient";
"Scene.ReviewTransactionBeforeSigning.Label.TransactionFee" = "Transaction fee";
"Scene.ReviewTransactionBeforeSigning.Label.TotalCostOfTransaction" = "Transaction total cost";
"Scene.ReviewTransactionBeforeSigning.Checkbox.HasReviewedPayment" = "I've reviewed the payment and understand I'm responsible for any loss if anything is incorrect. ";
"Scene.ReviewTransactionBeforeSigning.Button.HasReviewedProceedToSigning" = "To signing";


// MARK: SignTransaction
"Scene.SignTransaction.Label.SignTransactionWithEncryptionPassword" = "Confirm transaction with your password";
"Scene.SignTransaction.Field.EncryptionPassword" = "Encryption password";
"Scene.SignTransaction.Button.Confirm" = "Confirm";

// MARK: PollTransactionStatus
"Scene.PollTransactionStatus.Label.TransactionBroadcasted" = "Transaction broadcasted";
"Scene.PollTransactionStatus.Label.MightTakeSomeMinutes" = "In a minute or two, when the network's finished processing, your balance will be updated and you can view transaction details.";
"Scene.PollTransactionStatus.Event.Toast.DidCopyTransactionId" = "Copied transaction id";
"Scene.PollTransactionStatus.Button.CopyTransactionId" = "Copy transaction id";
"Scene.PollTransactionStatus.Button.SeeTransactionDetails" = "Transaction details";
"Scene.PollTransactionStatus.Button.SkipWaitingOrDone.Skip" = "Skip waiting";
"Scene.PollTransactionStatus.Button.SkipWaitingOrDone.Done" = "Done";

// MARK: TransactionConfirmation
"Scene.GotTransactionReceipt.Title" = "Confirmed";
"Scene.GotTransactionReceipt.Label.Confirmed" = "The network has successfully confirmed your transaction.";
"Scene.GotTransactionReceipt.Labels.Fee.Title" = "Transaction fee";
"Scene.GotTransactionReceipt.Labels.Fee.Value" = "%@E-12 Zil";
"Scene.GotTransactionReceipt.Button.OpenDetailsInBrowser" = "Open details in browser";


// MARK: Recieve
"Scene.Receive.Title" = "Receive";
"Scene.Receive.Label.MyPublicAddress" = "My public address";
"Scene.Receive.Button.CopyMyAddress" = "Copy";
"Scene.Receive.Button.RequestPayment" = "Request payment";
"Scene.Receive.Event.Toast.DidCopyAddress" = "Copied address";
"Scene.Receive.Field.RequestAmount" = "Request amount in %@";

// MARK: - Settings
"Scene.Settings.Title" = "Settings";

"Scene.Settings.Cell.RemovePincode" = "Remove pincode";
"Scene.Settings.Cell.SetPincode" = "Set pincode";

"Scene.Settings.Cell.StarUsOnGithub" = "Star us on Github";
"Scene.Settings.Cell.ReportIssueOnGithub" = "Report issue on Github";
"Scene.Settings.Cell.Acknowledgements" = "Acknowledgements";
"Scene.Settings.Cell.Terms of service" = "Terms of service";
"Scene.Settings.Cell.ReadERC20Warning" = "Read ERC-20 warning";
"Scene.Settings.Cell.ReadCustomECCWarning" = "Unreliable cryptography";
"Scene.Settings.Cell.CrashReportingPermissions" = "Crash reporting permissions";
"Scene.Settings.Cell.BackupWallet" = "Backup wallet";
"Scene.Settings.Cell.RemoveWallet" = "Remove wallet";
"Scene.Settings.Footer.Network" = "Connected to %s";

// MARK: - Confirm Wallet Removal
"Scene.ConfirmWalletRemoval.Title" = "Remove wallet";
"Scene.ConfirmWalletRemoval.Label.AreYouSure" = "Are you sure you want to remove your wallet?";
"Scene.ConfirmWalletRemoval.Checkbox.BackUpWallet" = "I understand that I will permanently lose any asset in this wallet if I have not backed up the wallet.";
"Scene.ConfirmWalletRemoval.Button.Confirm" = "Confirm";
